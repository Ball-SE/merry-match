import { supabase } from '../lib/supabase/supabaseClient';

export interface Profile {
  id: string;
  name: string;
  email: string;
  photo_url: string | null;
  age: number | null;
  bio: string | null;
  location: string | null; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å city ‡πÄ‡∏õ‡πá‡∏ô location
  photos: string[] | null;
  gender?: string | null; // ‡πÄ‡∏û‡∏¥‡πà‡∏° gender field
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° fields ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
}

export interface ProfileFilters {
  genders?: string[];
  minAge?: number;
  maxAge?: number;
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
export async function getCurrentUserProfile(): Promise<Profile | null> {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Supabase Auth
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('Auth error:', authError);
      return null;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏à‡∏≤‡∏Å table profiles
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();

    if (error) {
      console.error('Profile fetch error:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('Error getting current user profile:', error);
    return null;
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏Ç‡∏≠‡∏á user ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
export async function getUserProfile(userId: string): Promise<Profile | null> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('Profile fetch error:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('Error getting user profile:', error);
    return null;
  }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï photo_url
export async function updatePhotoUrl(photoUrl: string): Promise<boolean> {
  try {
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('Auth error:', authError);
      return false;
    }

    const { error } = await supabase
      .from('profiles')
      .update({ photo_url: photoUrl })
      .eq('id', user.id);

    if (error) {
      console.error('Update photo error:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error updating photo:', error);
    return false;
  }
}

// ‡∏î‡∏∂‡∏á profiles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö matching (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
export async function getMatchingProfiles(filters?: ProfileFilters): Promise<Profile[]> {
  try {
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('Auth error:', authError);
      return [];
    }

    // ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠ exclude ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ swipe ‡πÅ‡∏•‡πâ‡∏ß
    let query = supabase
      .from('profiles')
      .select(`
        id,
        name,
        email,
        age,
        photos,
        photo_url,
        bio,
        location,
        gender,
        sexual_preferences,
        racial_preferences,
        meeting_interests,
        interests
      `)
      .neq('id', user.id); // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° age filter
    if (filters?.minAge && filters.minAge > 18) {
      query = query.gte('age', filters.minAge);
    }
    if (filters?.maxAge && filters.maxAge < 80) {
      query = query.lte('age', filters.maxAge);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data, error } = await query.limit(200);

    if (error) {
      console.error('‚ùå Profiles fetch error:', error);
      return [];
    }

    // ‡∏î‡∏∂‡∏á list ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ swipe ‡πÅ‡∏•‡πâ‡∏ß
    const { data: swipedUsers, error: swipeError } = await supabase
      .from('swipes')
      .select('swiped_id')
      .eq('swiper_id', user.id);

    if (swipeError) {
      console.error('‚ùå Swipes fetch error:', swipeError);
      // ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà filter
    }

    const swipedUserIds = new Set(swipedUsers?.map(s => s.swiped_id) || []);
    console.log(`üö´ Already swiped users: ${swipedUserIds.size}`);

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ swipe ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å
    const unswipedProfiles = data?.filter(profile => !swipedUserIds.has(profile.id)) || [];
    
    console.log(`üìä Profiles before filtering: ${data?.length || 0}`);
    console.log(`üìä Profiles after removing swiped: ${unswipedProfiles.length}`);

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô JavaScript
    let filteredProfiles = unswipedProfiles.filter(profile => {
      const hasName = profile.name && profile.name.trim() !== '';
      const hasPhotos = (profile.photos && Array.isArray(profile.photos) && profile.photos.length > 0) ||
                       (profile.photo_url && profile.photo_url.trim() !== '') ||
                       true;
      
      // Filter by gender ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      let genderMatch = true;
      if (filters?.genders && filters.genders.length > 0 && !filters.genders.includes('default')) {
        const profileGender = profile.gender?.toLowerCase() || '';
        genderMatch = filters.genders.some(g => g.toLowerCase() === profileGender);
      }
      
      return hasName && hasPhotos && genderMatch;
    }).slice(0, 20);

    console.log(`‚úÖ Found ${filteredProfiles.length} new matching profiles`);
    return filteredProfiles;
  } catch (error) {
    console.error('üí• Error getting matching profiles:', error);
    return [];
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£ like/pass
export async function recordSwipeAction(
  targetUserId: string, 
  action: 'like' | 'pass'
): Promise<boolean> {
  try {
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('Auth error:', authError);
      return false;
    }

    const { error } = await supabase
      .from('swipes') // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ table swipes
      .insert({
        user_id: user.id,
        target_user_id: targetUserId,
        action: action,
        created_at: new Date().toISOString()
      });

    if (error) {
      console.error('Error recording swipe action:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error recording swipe action:', error);
    return false;
  }
}